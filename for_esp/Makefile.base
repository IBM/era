CPU ?= ariane
ARCH ?= riscv
ifdef DO_CROSS_COMPILATION
CROSS_COMPILE ?= riscv64-unknown-linux-gnu-
endif

ifdef COMPILE_TO_ESP
ESP_ROOT ?= $(realpath ../../esp)
ESP_DRIVERS ?= $(ESP_ROOT)/soft/common/drivers
ESP_DRV_LINUX  = $(ESP_DRIVERS)/linux
endif

CC = gcc -std=c99


INCDIR ?=
INCDIR += -I./include
ifdef COMPILE_TO_ESP
INCDIR += -I$(ESP_DRIVERS)/common/include
INCDIR += -I$(ESP_DRIVERS)/linux/include
endif

CFLAGS ?= -O2 -g
CFLAGS += $(INCDIR)
CFLAGS += -DGRID_MAP_X_DIM=$(CONFIG_GRID_MAP_X_DIM)
CFLAGS += -DGRID_MAP_Y_DIM=$(CONFIG_GRID_MAP_Y_DIM)
CFLAGS += -DGRID_MAP_RESLTN=$(CONFIG_GRID_MAP_RESLTN)
CFLAGS += -DRAYTR_RANGE=$(CONFIG_RAYTR_RANGE)
ifdef COMPILE_TO_ESP
CFLAGS += -DCOMPILE_TO_ESP
endif
#  -- ALWAYS use this one! --   ifdef CONFIG_ESP_INTERFACE
CFLAGS += -DUSE_ESP_INTERFACE
#   endif

ifdef CONFIG_NUM_XMIT_FFT
 CFLAGS += -DNUM_XMIT_FFT_ACCEL=$(CONFIG_NUM_XMIT_FFT)
endif
ifdef CONFIG_XMIT_FFT_LOGN
 CFLAGS += -DMAX_XMIT_FFT_LOGN=$(CONFIG_XMIT_FFT_LOGN)
endif
ifdef CONFIG_XMIT_FFT_MAX_N
 CFLAGS += -DMAX_XMIT_NUM_FFTS=$(CONFIG_XMIT_FFT_MAX_N)
endif

ifdef CONFIG_NUM_RECV_FFT
 CFLAGS += -DNUM_RECV_FFT_ACCEL=$(CONFIG_NUM_RECV_FFT)
endif
ifdef CONFIG_RECV_FFT_LOGN
 CFLAGS += -DMAX_RECV_FFT_LOGN=$(CONFIG_RECV_FFT_LOGN)
endif
ifdef CONFIG_RECV_FFT_MAX_N
 CFLAGS += -DMAX_RECV_NUM_FFTS=$(CONFIG_RECV_FFT_MAX_N)
endif



ifdef CONFIG_FFT_EN
 ifdef CONFIG_XMIT_FFT_EN
  CFLAGS += -DXMIT_HW_FFT
 endif
 ifdef CONFIG_RECV_FFT_EN
  CFLAGS += -DRECV_HW_FFT
 endif
 CFLAGS += -DUSE_FFT_FX=$(CONFIG_FFT_FX)
 CFLAGS += -DFFT_DEV_BASE='"$(FFT_DEVICE_BASE)"'
endif
ifdef CONFIG_FFT_BITREV
 CFLAGS += -DHW_FFT_BITREV
endif
$(info $$FFT_DEVICE_BASE is [${FFT_DEVICE_BASE}])

ifdef CONFIG_VITERBI_EN
 CFLAGS += -DHW_VIT
 CFLAGS += -DVIT_DEV_BASE='"$(VIT_DEVICE_BASE).0"'
 ifdef CONFIG_HW_SM_DECODE
  CFLAGS += -DDEC_SIG_FIELD_ON_HW=$(CONFIG_HW_SM_DECODE)
 else 
  CFLAGS += -DDEC_SIG_FIELD_ON_HW=false
 endif
 DEC_SIGF_FNMSTR = _$(CONFIG_HW_SM_DECODE)
else 
 CFLAGS += -DDEC_SIG_FIELD_ON_HW=false
 DEC_SIGF_FNMSTR = 
endif
$(info $$VIT_DEVICE_BASE is [${VIT_DEVICE_BASE}])

ifdef CONFIG_KERAS_CV_BYPASS
CFLAGS += -DBYPASS_KERAS_CV_CODE
endif

ifdef SHOW_FUSE
CFLAGS += -DWRITE_FUSED_MAPS
endif

ifdef CONFIG_DEBUG
CFLAGS += -DDEBUG_MODE
endif

ifdef CONFIG_VERBOSE
CFLAGS += -DVERBOSE_MODE
endif

ifdef CONFIG_FUSED_MAP
CFLAGS += -DWRITE_FUSED_MAPS
endif

ifdef CONFIG_ASCII_MAP
CFLAGS += -DWRITE_ASCII_MAP
endif

ifdef CONFIG_GDB
CFLAGS += -g
endif

ifdef CONFIG_LIMITS
CFLAGS += -DDO_LIMITS
endif

ifdef CONFIG_NUM_IOS
CFLAGS += -DDO_NUM_IOS
endif

LDLIBS ?=
ifdef COMPILE_TO_ESP
LDLIBS += -L$(ESP_BUILD_DRIVERS)/contig_alloc
LDLIBS += -L$(ESP_BUILD_DRIVERS)/test
LDLIBS += -L$(ESP_BUILD_DRIVERS)/libesp
endif

LDFLAGS ?=
LDFLAGS += -lm
LDFLAGS += -lpthread
ifdef COMPILE_TO_ESP
LDFLAGS += -lrt
LDFLAGS += -lesp
LDFLAGS += -ltest
LDFLAGS += -lcontig
endif

SRC_ERA1 = src/main.c src/occgrid.c src/lz4.c src/complex_ops.c src/crc.c src/delay.c src/fft.c src/fir.c src/gr_equalizer.c src/ofdm.c src/recv_pipe.c src/sdr_descrambler.c src/sdr_viterbi.c  src/sync_long.c src/sync_short.c src/xmit_pipe.c
SRC_ERA2 = $(SRC_ERA1)
SRC_PERA1 = $(SRC_ERA1)
SRC_PERA2 = $(SRC_ERA1)
SRC_RECV = src/recv_main.c src/complex_ops.c src/delay.c src/fft.c src/fir.c src/gr_equalizer.c src/ofdm.c src/recv_pipe.c src/sdr_descrambler.c src/sdr_viterbi.c src/sync_long.c src/sync_short.c
SRC_XMIT = src/xmit_main.c src/crc.c src/fft.c src/xmit_pipe.c

#SRC_T = $(foreach f, $(wildcard src/*.c), $(shell basename $(f)))
SRC_D = $(wildcard src/*.c)
HDR_T = $(wildcard include/*.h)

OBJ_ERA1 = $(SRC_ERA1:src/%.c=obj_era1/%.o)
OBJ_ERA2 = $(SRC_ERA2:src/%.c=obj_era2/%.o)
OBJ_PERA1 = $(SRC_ERA1:src/%.c=obj_pera1/%.o)
OBJ_PERA2 = $(SRC_ERA2:src/%.c=obj_pera2/%.o)
OBJ_RECV = $(SRC_RECV:src/%.c=obj_recv/%.o)
OBJ_XMIT = $(SRC_XMIT:src/%.c=obj_xmit/%.o)

OBJ_TERA1 = $(SRC_ERA1:src/%.c=obj_tera1/%.o)
OBJ_TERA2 = $(SRC_ERA2:src/%.c=obj_tera2/%.o)
OBJ_TPERA1 = $(SRC_ERA1:src/%.c=obj_tpera1/%.o)
OBJ_TPERA2 = $(SRC_ERA2:src/%.c=obj_tpera2/%.o)
OBJ_TRECV = $(SRC_RECV:src/%.c=obj_trecv/%.o)
OBJ_TXMIT = $(SRC_XMIT:src/%.c=obj_txmit/%.o)

VPATH = ./src

TARGET_ERA1=era1_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_ERA2=era2_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_PERA1=pera1_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_PERA2=pera2_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_RECV=do_recv_pipe
TARGET_XMIT=do_xmit_pipe

TARGET_TERA1=t_era1_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_TERA2=t_era2_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_TPERA1=t_pera1_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_TPERA2=t_pera2_$(CONFIG_GRID_MAP_X_DIM)_$(CONFIG_GRID_MAP_Y_DIM)_$(CONFIG_GRID_MAP_RESLTN)$(DEC_SIGF_FNMSTR)
TARGET_TRECV=t_do_recv_pipe
TARGET_TXMIT=t_do_xmit_pipe

ALL_OBJ_DIR=obj_era1 obj_era2 obj_pera1 obj_pera2 obj_recv obj_xmit obj_tera1 obj_tera2 obj_tpera1 obj_tpera2 obj_trecv obj_txmit


all: esp-libs $(ALL_OBJ_DIR) $(TARGET_ERA1) $(TARGET_ERA2) $(TARGET_PERA1) $(TARGET_PERA2) $(TARGET_RECV) $(TARGET_XMIT) $(TARGET_TERA1) $(TARGET_TERA2) $(TARGET_TPERA1) $(TARGET_TPERA2) $(TARGET_TRECV) $(TARGET_TXMIT)

ESP_BUILD_DRIVERS     = esp-build/drivers

esp-build:
	@mkdir -p $(ESP_BUILD_DRIVERS)/contig_alloc
	@mkdir -p $(ESP_BUILD_DRIVERS)/esp
	@mkdir -p $(ESP_BUILD_DRIVERS)/esp_cache
	@mkdir -p $(ESP_BUILD_DRIVERS)/libesp
	@mkdir -p $(ESP_BUILD_DRIVERS)/probe
	@mkdir -p $(ESP_BUILD_DRIVERS)/test
	@mkdir -p $(ESP_BUILD_DRIVERS)/utils/baremetal
	@mkdir -p $(ESP_BUILD_DRIVERS)/utils/linux
	@ln -sf $(ESP_DRV_LINUX)/contig_alloc/* $(ESP_BUILD_DRIVERS)/contig_alloc
	@ln -sf $(ESP_DRV_LINUX)/esp/* $(ESP_BUILD_DRIVERS)/esp
	@ln -sf $(ESP_DRV_LINUX)/esp_cache/* $(ESP_BUILD_DRIVERS)/esp_cache
	@ln -sf $(ESP_DRV_LINUX)/driver.mk $(ESP_BUILD_DRIVERS)
	@ln -sf $(ESP_DRV_LINUX)/include $(ESP_BUILD_DRIVERS)
	@ln -sf $(ESP_DRV_LINUX)/../common $(ESP_BUILD_DRIVERS)/../common

esp-build-clean:

esp-build-distclean: esp-build-clean
	$(QUIET_CLEAN)$(RM) -rf esp-build

ifdef COMPILE_FOR_ESP
esp-libs: esp-build
	  CROSS_COMPILE=$(CROSS_COMPILE) DRIVERS=$(ESP_DRV_LINUX) $(MAKE) -C $(ESP_BUILD_DRIVERS)/contig_alloc/ libcontig.a
	  cd $(ESP_BUILD_DRIVERS)/test; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/test
	  cd $(ESP_BUILD_DRIVERS)/libesp; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/libesp
	  cd $(ESP_BUILD_DRIVERS)/utils; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/utils
else
esp-libs: 

endif

.PHONY: esp-build-clean esp-build-distclean esp-libs


obj_era1/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DASCII_FN='"asciimap_era1_"' -DIMAGE_FN='"gridimage_era1_"' -DBAG_PORT=5556 -DXMIT_PORT=5558 -DRECV_PORT=5559 -DCAR_PORT=5562 -c $< -o $@

obj_era2/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DASCII_FN='"asciimap_era2_"' -DIMAGE_FN='"gridimage_era2_"' -DBAG_PORT=5557 -DXMIT_PORT=5560 -DRECV_PORT=5561 -DCAR_PORT=5563 -c $< -o $@

obj_pera1/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DASCII_FN='"asciimap_pera1_"' -DIMAGE_FN='"gridimage_pera1_"' -DBAG_PORT=5556 -DXMIT_PORT=5558 -DRECV_PORT=5559 -DCAR_PORT=5562 -DPARALLEL_PTHREADS -c $< -o $@

obj_pera2/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DASCII_FN='"asciimap_pera2_"' -DIMAGE_FN='"gridimage_pera2_"' -DBAG_PORT=5557 -DXMIT_PORT=5560 -DRECV_PORT=5561 -DCAR_PORT=5563 -DPARALLEL_PTHREADS -c $< -o $@

obj_recv/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@

obj_xmit/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@


obj_tera1/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -DASCII_FN='"asciimap_era1_"' -DIMAGE_FN='"gridimage_era1_"' -DBAG_PORT=5556 -DXMIT_PORT=5558 -DRECV_PORT=5559 -DCAR_PORT=5562 -c $< -o $@

obj_tera2/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -DASCII_FN='"asciimap_era2_"' -DIMAGE_FN='"gridimage_era2_"' -DBAG_PORT=5557 -DXMIT_PORT=5560 -DRECV_PORT=5561 -DCAR_PORT=5563 -c $< -o $@

obj_tpera1/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -DASCII_FN='"asciimap_pera1_"' -DIMAGE_FN='"gridimage_pera1_"' -DBAG_PORT=5556 -DXMIT_PORT=5558 -DRECV_PORT=5559 -DCAR_PORT=5562 -DPARALLEL_PTHREADS -c $< -o $@

obj_tpera2/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -DASCII_FN='"asciimap_pera2_"' -DIMAGE_FN='"gridimage_pera2_"' -DBAG_PORT=5557 -DXMIT_PORT=5560 -DRECV_PORT=5561 -DCAR_PORT=5563 -DPARALLEL_PTHREADS -c $< -o $@

obj_trecv/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -c $< -o $@

obj_txmit/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DINT_TIME -c $< -o $@



$(OBJ_ERA1): $(HDR_T)


$(OBJ_ERA2): $(HDR_T)


$(OBJ_PERA1): $(HDR_T)


$(OBJ_PERA2): $(HDR_T)


$(OBJ_RECV): $(HDR_T)


$(OBJ_XMIT): $(HDR_T)


$(OBJ_TERA1): $(HDR_T)


$(OBJ_TERA2): $(HDR_T)


$(OBJ_TPERA1): $(HDR_T)


$(OBJ_TPERA2): $(HDR_T)


$(OBJ_TRECV): $(HDR_T)


$(OBJ_TXMIT): $(HDR_T)



$(TARGET_ERA1): obj_era1 $(TARGET_ERA1).exe
	echo "Done building $@"

$(TARGET_ERA2): obj_era2 $(TARGET_ERA2).exe
	echo "Done building $@"

$(TARGET_PERA1): obj_pera1 $(TARGET_PERA1).exe
	echo "Done building $@"

$(TARGET_PERA2): obj_pera2 $(TARGET_PERA2).exe
	echo "Done building $@"

$(TARGET_RECV): obj_recv $(TARGET_RECV).exe
	echo "Done building $@"

$(TARGET_XMIT): obj_xmit $(TARGET_XMIT).exe
	echo "Done building $@"


$(TARGET_TERA1): obj_tera1 $(TARGET_TERA1).exe
	echo "Done building $@"

$(TARGET_TERA2): obj_tera2 $(TARGET_TERA2).exe
	echo "Done building $@"

$(TARGET_TPERA1): obj_tpera1 $(TARGET_TPERA1).exe
	echo "Done building $@"

$(TARGET_TPERA2): obj_tpera2 $(TARGET_TPERA2).exe
	echo "Done building $@"

$(TARGET_TRECV): obj_trecv $(TARGET_TRECV).exe
	echo "Done building $@"

$(TARGET_TXMIT): obj_txmit $(TARGET_TXMIT).exe
	echo "Done building $@"


$(TARGET_ERA1).exe: $(OBJ_ERA1)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_ERA2).exe: $(OBJ_ERA2)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_PERA1).exe: $(OBJ_PERA1)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_PERA2).exe: $(OBJ_PERA2)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_RECV).exe: $(OBJ_RECV)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_XMIT).exe: $(OBJ_XMIT)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)


$(TARGET_TERA1).exe: $(OBJ_TERA1)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_TERA2).exe: $(OBJ_TERA2)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_TPERA1).exe: $(OBJ_TPERA1)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_TPERA2).exe: $(OBJ_TPERA2)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_TRECV).exe: $(OBJ_TRECV)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(TARGET_TXMIT).exe: $(OBJ_TXMIT)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)


clean:
	$(RM) $(OBJ_ERA1) $(OBJ_ERA2) $(OBJ_PERA1) $(OBJ_PERA2) $(OBJ_RECV) $(OBJ_XMIT)
	$(RM) $(OBJ_TERA1) $(OBJ_TERA2) $(OBJ_TPERA1) $(OBJ_TPERA2) $(OBJ_TRECV) $(OBJ_TXMIT)
	$(RM) $(TARGET_ERA1) $(TARGET_ERA2) $(TARGET_PERA1) $(TARGET_PERA2) $(TARGET_RECV) $(TARGET_XMIT)
	$(RM) $(TARGET_TERA1) $(TARGET_TERA2) $(TARGET_TPERA1) $(TARGET_TPERA2) $(TARGET_TRECV) $(TARGET_TXMIT)

clobber: clean
	$(RM) -r $(ALL_OBJ_DIR)
	$(RM) $(TARGET_ERA1).exe $(TARGET_ERA2).exe
	$(RM) $(TARGET_PERA1).exe $(TARGET_PERA2).exe
	$(RM) $(TARGET_RECV).exe $(TARGET_XMIT).exe
	$(RM) $(TARGET_TERA1).exe $(TARGET_TERA2).exe
	$(RM) $(TARGET_TPERA1).exe $(TARGET_TPERA2).exe
	$(RM) $(TARGET_TRECV).exe $(TARGET_TXMIT).exe


obj_era1:
	mkdir $@

obj_era2:
	mkdir $@

obj_pera1:
	mkdir $@

obj_pera2:
	mkdir $@

obj_recv:
	mkdir $@

obj_xmit:
	mkdir $@


obj_tera1:
	mkdir $@

obj_tera2:
	mkdir $@

obj_tpera1:
	mkdir $@

obj_tpera2:
	mkdir $@

obj_trecv:
	mkdir $@

obj_txmit:
	mkdir $@

# Some "aliases" for builds...
era1: $(TARGET_ERA1)

era2: $(TARGET_ERA2)

era: era1 era2 

pera1: $(TARGET_PERA1)

pera2: $(TARGET_PERA2)

pera: pera1 pera2

recv_pipe: $(TARGET_RECV)

xmit_pipe: $(TARGET_XMIT)

t_era1: $(TARGET_TERA1)

t_era2: $(TARGET_TERA2)

t_era: t_era1 t_era2

t_pera1: $(TARGET_TPERA1)

t_pera2: $(TARGET_TPERA2)

t_pera: t_pera1 t_pera2

t_recv_pipe: $(TARGET_TRECV)

t_xmit_pipe: $(TARGET_TXMIT)

.PHONY: all clean era1 era2 era pera1 pera2 pera t_era1 t_era2 t_era t_pera1 t_pera2 t_pera recv_pipe xmit_pipe t_recv_pipe t_xmit_pipe


#depend:;	makedepend -fMakefile -- $(CFLAGS) -- $(SRC_D)
# DO NOT DELETE THIS LINE -- make depend depends on it.

